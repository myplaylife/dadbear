/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package me.littlepanda.dadbear.core.rpc;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SlaveInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SlaveInfo\",\"namespace\":\"me.littlepanda.dadbear.core.rpc\",\"fields\":[{\"name\":\"id\",\"type\":[\"string\",\"null\"]},{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"host\",\"type\":\"string\"},{\"name\":\"services\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ServiceInfo\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"host\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"protocol\",\"type\":\"string\"},{\"name\":\"implement\",\"type\":\"string\"},{\"name\":\"port\",\"type\":[\"null\",\"int\"]},{\"name\":\"schedule\",\"type\":[\"null\",\"string\"]},{\"name\":\"distributeAlgo\",\"type\":[\"null\",\"string\"]},{\"name\":\"description\",\"type\":[\"null\",\"string\"]}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence ip;
  @Deprecated public java.lang.CharSequence host;
  @Deprecated public java.util.List<me.littlepanda.dadbear.core.rpc.ServiceInfo> services;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public SlaveInfo() {}

  /**
   * All-args constructor.
   */
  public SlaveInfo(java.lang.CharSequence id, java.lang.CharSequence ip, java.lang.CharSequence host, java.util.List<me.littlepanda.dadbear.core.rpc.ServiceInfo> services) {
    this.id = id;
    this.ip = ip;
    this.host = host;
    this.services = services;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return ip;
    case 2: return host;
    case 3: return services;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: ip = (java.lang.CharSequence)value$; break;
    case 2: host = (java.lang.CharSequence)value$; break;
    case 3: services = (java.util.List<me.littlepanda.dadbear.core.rpc.ServiceInfo>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'host' field.
   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'services' field.
   */
  public java.util.List<me.littlepanda.dadbear.core.rpc.ServiceInfo> getServices() {
    return services;
  }

  /**
   * Sets the value of the 'services' field.
   * @param value the value to set.
   */
  public void setServices(java.util.List<me.littlepanda.dadbear.core.rpc.ServiceInfo> value) {
    this.services = value;
  }

  /** Creates a new SlaveInfo RecordBuilder */
  public static me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder newBuilder() {
    return new me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder();
  }
  
  /** Creates a new SlaveInfo RecordBuilder by copying an existing Builder */
  public static me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder newBuilder(me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder other) {
    return new me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder(other);
  }
  
  /** Creates a new SlaveInfo RecordBuilder by copying an existing SlaveInfo instance */
  public static me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder newBuilder(me.littlepanda.dadbear.core.rpc.SlaveInfo other) {
    return new me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for SlaveInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SlaveInfo>
    implements org.apache.avro.data.RecordBuilder<SlaveInfo> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence ip;
    private java.lang.CharSequence host;
    private java.util.List<me.littlepanda.dadbear.core.rpc.ServiceInfo> services;

    /** Creates a new Builder */
    private Builder() {
      super(me.littlepanda.dadbear.core.rpc.SlaveInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.host)) {
        this.host = data().deepCopy(fields()[2].schema(), other.host);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.services)) {
        this.services = data().deepCopy(fields()[3].schema(), other.services);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SlaveInfo instance */
    private Builder(me.littlepanda.dadbear.core.rpc.SlaveInfo other) {
            super(me.littlepanda.dadbear.core.rpc.SlaveInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.host)) {
        this.host = data().deepCopy(fields()[2].schema(), other.host);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.services)) {
        this.services = data().deepCopy(fields()[3].schema(), other.services);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'ip' field */
    public java.lang.CharSequence getIp() {
      return ip;
    }
    
    /** Sets the value of the 'ip' field */
    public me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ip = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'ip' field has been set */
    public boolean hasIp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'ip' field */
    public me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder clearIp() {
      ip = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'host' field */
    public java.lang.CharSequence getHost() {
      return host;
    }
    
    /** Sets the value of the 'host' field */
    public me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.host = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'host' field has been set */
    public boolean hasHost() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'host' field */
    public me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder clearHost() {
      host = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'services' field */
    public java.util.List<me.littlepanda.dadbear.core.rpc.ServiceInfo> getServices() {
      return services;
    }
    
    /** Sets the value of the 'services' field */
    public me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder setServices(java.util.List<me.littlepanda.dadbear.core.rpc.ServiceInfo> value) {
      validate(fields()[3], value);
      this.services = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'services' field has been set */
    public boolean hasServices() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'services' field */
    public me.littlepanda.dadbear.core.rpc.SlaveInfo.Builder clearServices() {
      services = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public SlaveInfo build() {
      try {
        SlaveInfo record = new SlaveInfo();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ip = fieldSetFlags()[1] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.host = fieldSetFlags()[2] ? this.host : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.services = fieldSetFlags()[3] ? this.services : (java.util.List<me.littlepanda.dadbear.core.rpc.ServiceInfo>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
