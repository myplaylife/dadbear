/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package me.littlepanda.dadbear.core.config;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ConfigState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ConfigState\",\"namespace\":\"me.littlepanda.dadbear.core.config\",\"fields\":[{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"ConfigInitState\",\"symbols\":[\"INIT\",\"OK\"]},\"default\":\"OK\"},{\"name\":\"changed\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public me.littlepanda.dadbear.core.config.ConfigInitState state;
  @Deprecated public java.util.List<java.lang.CharSequence> changed;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public ConfigState() {}

  /**
   * All-args constructor.
   */
  public ConfigState(me.littlepanda.dadbear.core.config.ConfigInitState state, java.util.List<java.lang.CharSequence> changed) {
    this.state = state;
    this.changed = changed;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return state;
    case 1: return changed;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: state = (me.littlepanda.dadbear.core.config.ConfigInitState)value$; break;
    case 1: changed = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'state' field.
   */
  public me.littlepanda.dadbear.core.config.ConfigInitState getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(me.littlepanda.dadbear.core.config.ConfigInitState value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'changed' field.
   */
  public java.util.List<java.lang.CharSequence> getChanged() {
    return changed;
  }

  /**
   * Sets the value of the 'changed' field.
   * @param value the value to set.
   */
  public void setChanged(java.util.List<java.lang.CharSequence> value) {
    this.changed = value;
  }

  /** Creates a new ConfigState RecordBuilder */
  public static me.littlepanda.dadbear.core.config.ConfigState.Builder newBuilder() {
    return new me.littlepanda.dadbear.core.config.ConfigState.Builder();
  }
  
  /** Creates a new ConfigState RecordBuilder by copying an existing Builder */
  public static me.littlepanda.dadbear.core.config.ConfigState.Builder newBuilder(me.littlepanda.dadbear.core.config.ConfigState.Builder other) {
    return new me.littlepanda.dadbear.core.config.ConfigState.Builder(other);
  }
  
  /** Creates a new ConfigState RecordBuilder by copying an existing ConfigState instance */
  public static me.littlepanda.dadbear.core.config.ConfigState.Builder newBuilder(me.littlepanda.dadbear.core.config.ConfigState other) {
    return new me.littlepanda.dadbear.core.config.ConfigState.Builder(other);
  }
  
  /**
   * RecordBuilder for ConfigState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ConfigState>
    implements org.apache.avro.data.RecordBuilder<ConfigState> {

    private me.littlepanda.dadbear.core.config.ConfigInitState state;
    private java.util.List<java.lang.CharSequence> changed;

    /** Creates a new Builder */
    private Builder() {
      super(me.littlepanda.dadbear.core.config.ConfigState.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(me.littlepanda.dadbear.core.config.ConfigState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.state)) {
        this.state = data().deepCopy(fields()[0].schema(), other.state);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.changed)) {
        this.changed = data().deepCopy(fields()[1].schema(), other.changed);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ConfigState instance */
    private Builder(me.littlepanda.dadbear.core.config.ConfigState other) {
            super(me.littlepanda.dadbear.core.config.ConfigState.SCHEMA$);
      if (isValidValue(fields()[0], other.state)) {
        this.state = data().deepCopy(fields()[0].schema(), other.state);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.changed)) {
        this.changed = data().deepCopy(fields()[1].schema(), other.changed);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'state' field */
    public me.littlepanda.dadbear.core.config.ConfigInitState getState() {
      return state;
    }
    
    /** Sets the value of the 'state' field */
    public me.littlepanda.dadbear.core.config.ConfigState.Builder setState(me.littlepanda.dadbear.core.config.ConfigInitState value) {
      validate(fields()[0], value);
      this.state = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'state' field has been set */
    public boolean hasState() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'state' field */
    public me.littlepanda.dadbear.core.config.ConfigState.Builder clearState() {
      state = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'changed' field */
    public java.util.List<java.lang.CharSequence> getChanged() {
      return changed;
    }
    
    /** Sets the value of the 'changed' field */
    public me.littlepanda.dadbear.core.config.ConfigState.Builder setChanged(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.changed = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'changed' field has been set */
    public boolean hasChanged() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'changed' field */
    public me.littlepanda.dadbear.core.config.ConfigState.Builder clearChanged() {
      changed = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public ConfigState build() {
      try {
        ConfigState record = new ConfigState();
        record.state = fieldSetFlags()[0] ? this.state : (me.littlepanda.dadbear.core.config.ConfigInitState) defaultValue(fields()[0]);
        record.changed = fieldSetFlags()[1] ? this.changed : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
