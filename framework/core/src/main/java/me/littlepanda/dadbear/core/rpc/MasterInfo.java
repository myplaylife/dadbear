/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package me.littlepanda.dadbear.core.rpc;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MasterInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MasterInfo\",\"namespace\":\"me.littlepanda.dadbear.core.rpc\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"host\",\"type\":\"string\"},{\"name\":\"slaveMasterPort\",\"type\":\"int\"},{\"name\":\"clientMasterPort\",\"type\":\"int\"},{\"name\":\"isLeader\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence ip;
  @Deprecated public java.lang.CharSequence host;
  @Deprecated public int slaveMasterPort;
  @Deprecated public int clientMasterPort;
  @Deprecated public boolean isLeader;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public MasterInfo() {}

  /**
   * All-args constructor.
   */
  public MasterInfo(java.lang.CharSequence id, java.lang.CharSequence ip, java.lang.CharSequence host, java.lang.Integer slaveMasterPort, java.lang.Integer clientMasterPort, java.lang.Boolean isLeader) {
    this.id = id;
    this.ip = ip;
    this.host = host;
    this.slaveMasterPort = slaveMasterPort;
    this.clientMasterPort = clientMasterPort;
    this.isLeader = isLeader;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return ip;
    case 2: return host;
    case 3: return slaveMasterPort;
    case 4: return clientMasterPort;
    case 5: return isLeader;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: ip = (java.lang.CharSequence)value$; break;
    case 2: host = (java.lang.CharSequence)value$; break;
    case 3: slaveMasterPort = (java.lang.Integer)value$; break;
    case 4: clientMasterPort = (java.lang.Integer)value$; break;
    case 5: isLeader = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'host' field.
   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'slaveMasterPort' field.
   */
  public java.lang.Integer getSlaveMasterPort() {
    return slaveMasterPort;
  }

  /**
   * Sets the value of the 'slaveMasterPort' field.
   * @param value the value to set.
   */
  public void setSlaveMasterPort(java.lang.Integer value) {
    this.slaveMasterPort = value;
  }

  /**
   * Gets the value of the 'clientMasterPort' field.
   */
  public java.lang.Integer getClientMasterPort() {
    return clientMasterPort;
  }

  /**
   * Sets the value of the 'clientMasterPort' field.
   * @param value the value to set.
   */
  public void setClientMasterPort(java.lang.Integer value) {
    this.clientMasterPort = value;
  }

  /**
   * Gets the value of the 'isLeader' field.
   */
  public java.lang.Boolean getIsLeader() {
    return isLeader;
  }

  /**
   * Sets the value of the 'isLeader' field.
   * @param value the value to set.
   */
  public void setIsLeader(java.lang.Boolean value) {
    this.isLeader = value;
  }

  /** Creates a new MasterInfo RecordBuilder */
  public static me.littlepanda.dadbear.core.rpc.MasterInfo.Builder newBuilder() {
    return new me.littlepanda.dadbear.core.rpc.MasterInfo.Builder();
  }
  
  /** Creates a new MasterInfo RecordBuilder by copying an existing Builder */
  public static me.littlepanda.dadbear.core.rpc.MasterInfo.Builder newBuilder(me.littlepanda.dadbear.core.rpc.MasterInfo.Builder other) {
    return new me.littlepanda.dadbear.core.rpc.MasterInfo.Builder(other);
  }
  
  /** Creates a new MasterInfo RecordBuilder by copying an existing MasterInfo instance */
  public static me.littlepanda.dadbear.core.rpc.MasterInfo.Builder newBuilder(me.littlepanda.dadbear.core.rpc.MasterInfo other) {
    return new me.littlepanda.dadbear.core.rpc.MasterInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for MasterInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MasterInfo>
    implements org.apache.avro.data.RecordBuilder<MasterInfo> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence ip;
    private java.lang.CharSequence host;
    private int slaveMasterPort;
    private int clientMasterPort;
    private boolean isLeader;

    /** Creates a new Builder */
    private Builder() {
      super(me.littlepanda.dadbear.core.rpc.MasterInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(me.littlepanda.dadbear.core.rpc.MasterInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.host)) {
        this.host = data().deepCopy(fields()[2].schema(), other.host);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.slaveMasterPort)) {
        this.slaveMasterPort = data().deepCopy(fields()[3].schema(), other.slaveMasterPort);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.clientMasterPort)) {
        this.clientMasterPort = data().deepCopy(fields()[4].schema(), other.clientMasterPort);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isLeader)) {
        this.isLeader = data().deepCopy(fields()[5].schema(), other.isLeader);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing MasterInfo instance */
    private Builder(me.littlepanda.dadbear.core.rpc.MasterInfo other) {
            super(me.littlepanda.dadbear.core.rpc.MasterInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.host)) {
        this.host = data().deepCopy(fields()[2].schema(), other.host);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.slaveMasterPort)) {
        this.slaveMasterPort = data().deepCopy(fields()[3].schema(), other.slaveMasterPort);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.clientMasterPort)) {
        this.clientMasterPort = data().deepCopy(fields()[4].schema(), other.clientMasterPort);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isLeader)) {
        this.isLeader = data().deepCopy(fields()[5].schema(), other.isLeader);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'ip' field */
    public java.lang.CharSequence getIp() {
      return ip;
    }
    
    /** Sets the value of the 'ip' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ip = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'ip' field has been set */
    public boolean hasIp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'ip' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder clearIp() {
      ip = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'host' field */
    public java.lang.CharSequence getHost() {
      return host;
    }
    
    /** Sets the value of the 'host' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.host = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'host' field has been set */
    public boolean hasHost() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'host' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder clearHost() {
      host = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'slaveMasterPort' field */
    public java.lang.Integer getSlaveMasterPort() {
      return slaveMasterPort;
    }
    
    /** Sets the value of the 'slaveMasterPort' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder setSlaveMasterPort(int value) {
      validate(fields()[3], value);
      this.slaveMasterPort = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'slaveMasterPort' field has been set */
    public boolean hasSlaveMasterPort() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'slaveMasterPort' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder clearSlaveMasterPort() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'clientMasterPort' field */
    public java.lang.Integer getClientMasterPort() {
      return clientMasterPort;
    }
    
    /** Sets the value of the 'clientMasterPort' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder setClientMasterPort(int value) {
      validate(fields()[4], value);
      this.clientMasterPort = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'clientMasterPort' field has been set */
    public boolean hasClientMasterPort() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'clientMasterPort' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder clearClientMasterPort() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'isLeader' field */
    public java.lang.Boolean getIsLeader() {
      return isLeader;
    }
    
    /** Sets the value of the 'isLeader' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder setIsLeader(boolean value) {
      validate(fields()[5], value);
      this.isLeader = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'isLeader' field has been set */
    public boolean hasIsLeader() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'isLeader' field */
    public me.littlepanda.dadbear.core.rpc.MasterInfo.Builder clearIsLeader() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public MasterInfo build() {
      try {
        MasterInfo record = new MasterInfo();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ip = fieldSetFlags()[1] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.host = fieldSetFlags()[2] ? this.host : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.slaveMasterPort = fieldSetFlags()[3] ? this.slaveMasterPort : (java.lang.Integer) defaultValue(fields()[3]);
        record.clientMasterPort = fieldSetFlags()[4] ? this.clientMasterPort : (java.lang.Integer) defaultValue(fields()[4]);
        record.isLeader = fieldSetFlags()[5] ? this.isLeader : (java.lang.Boolean) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
